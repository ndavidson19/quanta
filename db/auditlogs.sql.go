// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: auditlogs.sql

package db

import (
	"context"
	"database/sql"
)

const createLogs = `-- name: CreateLogs :one
INSERT INTO audit_logs (action) VALUES ($1) RETURNING id, account_id, action, timestamp
`

func (q *Queries) CreateLogs(ctx context.Context, action sql.NullString) (AuditLog, error) {
	row := q.db.QueryRowContext(ctx, createLogs, action)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Action,
		&i.Timestamp,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :many
SELECT id, account_id, action, timestamp FROM audit_logs ORDER BY account_id LIMIT $1 OFFSET $2
`

type ListLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLogs(ctx context.Context, arg ListLogsParams) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, listLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Action,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
