// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: trade.sql

package db

import (
	"context"
	"database/sql"
)

const createTrade = `-- name: CreateTrade :one
INSERT INTO trades (
    id,
    account_id,
    symbol,
    amount,
    price,
    trade_type,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, account_id, symbol, amount, price, trade_type, created_at
`

type CreateTradeParams struct {
	ID        int64
	AccountID int64
	Symbol    sql.NullString
	Amount    int32
	Price     string
	TradeType sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.ID,
		arg.AccountID,
		arg.Symbol,
		arg.Amount,
		arg.Price,
		arg.TradeType,
		arg.CreatedAt,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Symbol,
		&i.Amount,
		&i.Price,
		&i.TradeType,
		&i.CreatedAt,
	)
	return i, err
}

const getTrade = `-- name: GetTrade :one
SELECT id, account_id, symbol, amount, price, trade_type, created_at FROM trades
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrade(ctx context.Context, id int64) (Trade, error) {
	row := q.db.QueryRowContext(ctx, getTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Symbol,
		&i.Amount,
		&i.Price,
		&i.TradeType,
		&i.CreatedAt,
	)
	return i, err
}

const listTrades = `-- name: ListTrades :many
SELECT id, account_id, symbol, amount, price, trade_type, created_at FROM trades
ORDER BY account_id
LIMIT $1
OFFSET $2
`

type ListTradesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTrades(ctx context.Context, arg ListTradesParams) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, listTrades, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Symbol,
			&i.Amount,
			&i.Price,
			&i.TradeType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
