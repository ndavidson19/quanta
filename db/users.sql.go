// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    full_name,
    email,
    phone_number,
    password_changed_at,
    created_at,
    last_login_at,
    login_attempts,
    locked_until,
    reset_token,
    reset_token_expires_at
    ) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
    )
RETURNING username, hashed_password, full_name, email, phone_number, password_changed_at, created_at, last_login_at, login_attempts, locked_until, reset_token, reset_token_expires_at, role
`

type CreateUserParams struct {
	Username            string         `json:"username"`
	HashedPassword      string         `json:"hashed_password"`
	FullName            string         `json:"full_name"`
	Email               string         `json:"email"`
	PhoneNumber         sql.NullString `json:"phone_number"`
	PasswordChangedAt   time.Time      `json:"password_changed_at"`
	CreatedAt           time.Time      `json:"created_at"`
	LastLoginAt         sql.NullTime   `json:"last_login_at"`
	LoginAttempts       sql.NullInt32  `json:"login_attempts"`
	LockedUntil         sql.NullTime   `json:"locked_until"`
	ResetToken          sql.NullString `json:"reset_token"`
	ResetTokenExpiresAt sql.NullTime   `json:"reset_token_expires_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.PasswordChangedAt,
		arg.CreatedAt,
		arg.LastLoginAt,
		arg.LoginAttempts,
		arg.LockedUntil,
		arg.ResetToken,
		arg.ResetTokenExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.LoginAttempts,
		&i.LockedUntil,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, phone_number, password_changed_at, created_at, last_login_at, login_attempts, locked_until, reset_token, reset_token_expires_at, role FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.LoginAttempts,
		&i.LockedUntil,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.Role,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT username, hashed_password, full_name, email, phone_number, password_changed_at, created_at, last_login_at, login_attempts, locked_until, reset_token, reset_token_expires_at, role FROM users
WHERE username = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.LoginAttempts,
		&i.LockedUntil,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.Role,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, hashed_password, full_name, email, phone_number, password_changed_at, created_at, last_login_at, login_attempts, locked_until, reset_token, reset_token_expires_at, role FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.LastLoginAt,
			&i.LoginAttempts,
			&i.LockedUntil,
			&i.ResetToken,
			&i.ResetTokenExpiresAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set hashed_password = $2,
    full_name = $3,
    email = $4,
    phone_number = $5,
    password_changed_at = $6,
    created_at = $7,
    last_login_at = $8,
    login_attempts = $9,
    locked_until = $10,
    reset_token = $11,
    reset_token_expires_at = $12
WHERE username = $1
`

type UpdateUserParams struct {
	Username            string         `json:"username"`
	HashedPassword      string         `json:"hashed_password"`
	FullName            string         `json:"full_name"`
	Email               string         `json:"email"`
	PhoneNumber         sql.NullString `json:"phone_number"`
	PasswordChangedAt   time.Time      `json:"password_changed_at"`
	CreatedAt           time.Time      `json:"created_at"`
	LastLoginAt         sql.NullTime   `json:"last_login_at"`
	LoginAttempts       sql.NullInt32  `json:"login_attempts"`
	LockedUntil         sql.NullTime   `json:"locked_until"`
	ResetToken          sql.NullString `json:"reset_token"`
	ResetTokenExpiresAt sql.NullTime   `json:"reset_token_expires_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.PasswordChangedAt,
		arg.CreatedAt,
		arg.LastLoginAt,
		arg.LoginAttempts,
		arg.LockedUntil,
		arg.ResetToken,
		arg.ResetTokenExpiresAt,
	)
	return err
}
